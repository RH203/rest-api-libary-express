// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(100)
  email      String       @unique @db.VarChar(255)
  password   String       @db.VarChar(100)
  created_at DateTime     @default(now())
  update_at  DateTime     @default(now()) @updatedAt
  deteled_at DateTime?
  role       Role
  gender     Gender
  Peminjaman Peminjaman[]

  @@map("students")
}

model Book {
  id              Int          @id @default(autoincrement())
  title           String       @db.VarChar(255)
  description     String?      @db.VarChar(255)
  author          String       @db.VarChar(255)
  isbn            String?      @unique @db.VarChar(255)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now()) @updatedAt
  deteled_at      DateTime?
  publisher       Publisher    @relation(fields: [publisherBookId], references: [id])
  publisherBookId Int
  genres          GenreBook[]
  stok            Int
  Peminjaman      Peminjaman[]

  @@map("books")
}

model Publisher {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(100)
  books Book[]

  @@map("publishers")
}

model Genre {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(100)
  GenreBook GenreBook[]

  @@map("genres")
}

model GenreBook {
  id      Int   @id @default(autoincrement())
  book    Book  @relation(fields: [bookId], references: [id])
  genre   Genre @relation(fields: [genreId], references: [id])
  bookId  Int
  genreId Int

  @@unique([bookId, genreId])
  @@map("genre_books")
}

model Peminjaman {
  id          Int       @id @default(autoincrement())
  student     Student   @relation(fields: [student_id], references: [id])
  book        Book      @relation(fields: [book_id], references: [id])
  borrow_date DateTime? @default(now())
  return_date DateTime? @updatedAt
  notes       String?   @db.VarChar(100)
  student_id  Int
  book_id     Int

  @@unique([student_id, book_id])
  @@map("peminjaman_buku")
}

enum Role {
  Student
  Admin
}

enum Gender {
  Male
  Female
}
